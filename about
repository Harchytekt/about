#!/bin/bash

# about - a CLI Bash script to show system info

# This script is inspired by ScreenFetch (https://github.com/KittyKatt/screenFetch)
# and by Archey (https://github.com/djmelik/archey).
# Supports ZSH and Bash.

# Copyright (C) 2017 Ducobu Alexandre <alexandre.ducobu@yahoo.be>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

detect_os_details() {
  friendly_name=$(awk '/SOFTWARE LICENSE AGREEMENT FOR macOS/' '/System/Library/CoreServices/Setup Assistant.app/Contents/Resources/en.lproj/OSXSoftwareLicense.rtf' | awk -F 'macOS ' '{print $NF}' | awk '{print substr($0, 0, length($0)-1)}')
  os_version=$(sw_vers -productVersion)
  build_version=$(sw_vers -buildVersion)
  hardware=$(uname -m)
  
  hardware_desc="Unknown"
  case $hardware in
    arm64) hardware_desc="ARM64" ;;
    x86_64) hardware_desc="64-bit" ;;
    i386) hardware_desc="32-bit" ;;
  esac

  OS="macOS ${friendly_name} ${os_version} (${build_version}, ${hardware_desc})"
}

detect_kernel_version() {
  kernel="$(uname -srm)"
}

detect_uptime() {
  boot_time=$(sysctl -n kern.boottime | awk -F'[ ,]' '{print $4}' | sed 's/}//')
  now=$(date +%s)

  if [[ -n $boot_time && -n $now ]]; then
    uptime_sec=$((now - boot_time))
    days=$((uptime_sec / 86400))
    hours=$((uptime_sec % 86400 / 3600))
    minutes=$((uptime_sec % 3600 / 60))
    uptime="${days}d ${hours}h ${minutes}m"
  else
    uptime="Unknown"
  fi
}

detect_packages() {
  packages=0
  
  if command -v brew >/dev/null 2>&1; then
    brew_packages=$(brew list -1 2>/dev/null | wc -l)
    ((packages += brew_packages))
  fi

  if command -v port >/dev/null 2>&1; then
    port_packages=$(port installed | wc -l)
    ((packages += port_packages))
  fi

  packages=${packages:-"Unknown"}
}

# Shell Detection - Begin
detect_shell_version() {
    local version_data='' version='' get_version='--version'

    version_data="$( $1 $get_version 2>/dev/null )"

    if [[ -n $version_data ]];then
        version=$(awk '
        BEGIN {
            IGNORE_CASE=1
        }
        /'$2'/ {
            gsub(/(,|v|V)/, "",$'$3')
            if ($2 ~ /[Bb][Aa][Ss][Hh]/) {
                gsub(/\(.*|-release|-version\)/,"",$4)
            }
            print $'$3'
            exit # quit after first match prints
        }' <<< "$version_data")
    fi
    echo "$version"
}
detect_shell() {
    shell_type=$(ps -p $PPID -o args | tail -1)
    shell_type=${shell_type/-}
    shell_type=${shell_type//*\/}

    case $shell_type in
        bash)
            shell_version_data=$( detect_shell_version "$shell_type" "^GNU.bash,.version" "4" )
            ;;
        csh)
            shell_version_data=$( detect_shell_version "$shell_type" "$shell_type" "3" )
            ;;
        dash)
            shell_version_data=$( detect_shell_version "$shell_type" "$shell_type" "3" )
            ;;
        ksh)
            shell_version_data=$( detect_shell_version "$shell_type" "version" "5" )
            ;;
        tcsh)
            shell_version_data=$( detect_shell_version "$shell_type" "^tcsh" "2" )
            ;;
        zsh)
            shell_version_data=$( detect_shell_version "$shell_type" "^zsh" "2" )
            ;;
    esac

    if [[ -n $shell_version_data ]];then
        shell_type="$shell_type $shell_version_data"
    fi

    shell=${shell_type}
    terminal="$TERM ${TERM_PROGRAM//_/ }"
}
# Shell Detection - End

detect_resolution() {
  resolution=$(system_profiler SPDisplaysDataType | awk '/Resolution:/ {print $2 "x" $4}')
  resolution="${resolution:-Unknown}"
}

detect_window_manager() {
  desktop_environment="Aqua"
  window_manager="Quartz Compositor"

  detect_window_manager_theme
}

detect_window_manager_theme() {
  window_manager_theme="Not Found"
  theme_identifier=$(defaults read NSGlobalDomain AppleAquaColorVariant 2>/dev/null)
  if [ "$theme_identifier" -eq 1 ] || [ -z "$theme_identifier" ]; then
      window_manager_theme="Blue"
  else
      window_manager_theme="Graphite"
  fi
}

detect_storage() {
  disk_util_info=$(diskutil info /)
  free_storage_human=$(extract_value "$disk_util_info" "Container Free Space" 5)
  total_storage_human=$(extract_value "$disk_util_info" "Disk Size" 4)
  free_storage=$(extract_value "$disk_util_info" "Container Free Space" 4)
  total_storage=$(extract_value "$disk_util_info" "Disk Size" 3)

  used_storage=$(echo "$total_storage - $free_storage" | bc)

  storage_percentage=$(calculate_percentage "${used_storage}" "${total_storage}")
}

detect_cpu_gpu() {
  cpu=$(sysctl -n machdep.cpu.brand_string)
  gpu=$(system_profiler SPDisplaysDataType | awk -F': ' '/^\ *Chipset Model:/ {print $2}' | awk '{ printf "%s / ", $0 }' | sed -e 's/\/ $//g')
}

detect_ram() {
  vm_stat=$(vm_stat)
  page_size=$(pagesize)
  human=1024
  human_as_gb=$(echo "$human ^ 3" | bc)
  human_ram="GB"

  total_ram=$(echo "$(sysctl -n hw.memsize)"/"${human_as_gb}" | bc)
  pages_free=$(extract_value "$vm_stat" ' free' 3 true)
  pages_active=$(extract_value "$vm_stat" ' active' 3 true)
  pages_inactive=$(extract_value "$vm_stat" ' inactive' 3 true)
  pages_speculative=$(extract_value "$vm_stat" ' speculative' 3 true)
  pages_throttled=$(extract_value "$vm_stat" ' throttled' 3 true)
  pages_wired_down=$(extract_value "$vm_stat" ' wired down' 4 true)
  pages_purgeable=$(extract_value "$vm_stat" ' purgeable' 3 true)

  total_pages=$((pages_free + pages_active + pages_inactive + pages_speculative + pages_throttled + pages_wired_down + pages_purgeable))
  used_ram_bytes=$((total_pages * page_size))
  used_ram=$((used_ram_bytes / human_as_gb))

  ram_percentage=$(calculate_percentage "${used_ram}" "${total_ram}")
}

extract_value() {
  local output=$1
  local pattern=$2
  local field=$3
  local remove_periods=${4:-false}  # Optional parameter to remove periods

  local value=$(echo "$output" | grep "$pattern" | awk -v field=$field '{ print $field }')

  if [ "$remove_periods" = true ]; then
    value=$(echo "$value" | sed 's/\.//')
  fi

  echo "$value"
}

calculate_percentage() {
    local numerator=$1
    local denominator=$2

    # Check if both arguments are provided
    if [[ -z "$numerator" || -z "$denominator" ]]; then
        echo "Usage: calculate_percentage <numerator> <denominator>"
        return 1
    fi

    # Calculate the percentage using bc with a scale of 4 for intermediate precision
    local result=$(bc -l <<< "scale=4; ($numerator / $denominator) * 100")

    # Format the result to two decimal places
    printf "%.2f\n" "$result"
}

setup_colors() {
  RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
  YELLOW=$(tput setaf 3)
  BLUE=$(tput setaf 4)
  PURPLE=$(tput setaf 5)
  CIAN=$(tput setaf 6)
  TEXT_COLOR=$CIAN
  RESET=$(tput sgr0)
}

gather_system_info() {
  user=$(whoami)
  hostname=$(scutil --get LocalHostName)
  detect_os_details
  detect_kernel_version
  detect_uptime
  detect_packages
  detect_shell
  detect_resolution
  detect_window_manager
  detect_storage
  detect_cpu_gpu
  detect_ram
}

build_info_with_colors() {
  fields[${#fields[@]}]="${TEXT_COLOR}User:${RESET} ${user}@${hostname}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}OS:${RESET} ${OS}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}Kernel:${RESET} ${kernel}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}Uptime:${RESET} ${uptime}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}Packages:${RESET} ${packages}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}Shell:${RESET} ${shell}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}Terminal:${RESET} ${terminal}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}Resolution:${RESET} ${resolution}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}DE:${RESET} ${desktop_environment}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}WM:${RESET} ${window_manager}, ${window_manager_theme}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}CPU:${RESET} ${cpu}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}GPU:${RESET} ${gpu}${RESET}"
  fields[${#fields[@]}]="${TEXT_COLOR}Storage:${RESET} ${storage_percentage}% (${used_storage} ${free_storage_human} ${BLUE}/${RESET} ${total_storage} ${total_storage_human}) ${PURPLE}| ${TEXT_COLOR}RAM:${RESET} ${ram_percentage}% (${used_ram} ${human_ram} ${BLUE}/${RESET} ${total_ram} ${human_ram})${RESET}"
}

display_system_info() {
  build_info_with_colors

  echo -e "
${GREEN#  }                                   ${fields[0]}
${GREEN#  }                                  ${fields[1]}
${GREEN#  }                                   ${fields[2]}
${GREEN#  }                        ${fields[3]}
${YELLOW# }                ${fields[4]}
${YELLOW# }                 ${fields[5]}
${RED#    }                  ${fields[6]}
${RED#    }                  ${fields[7]}
${RED#    }                 ${fields[8]}
${PURPLE# }                ${fields[9]}
${PURPLE# }                  ${fields[10]}
${BLUE#   }                      ${fields[11]}
${BLUE#   }                             ${fields[12]}\
${RESET}
"
}

setup_colors
gather_system_info
display_system_info
